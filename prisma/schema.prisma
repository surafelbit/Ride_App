// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  PASSENGER
  DRIVER
}
enum RideStatus {
  REQUESTED
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
model User {
  id                     String     @id @default(uuid())
  email                  String     @unique
  firstName              String 
  lastName               String
  password               String
  driverLicenseImageUrl  String?   
  isDriverVerified       Boolean    @default(false)
  role                   Role
  profileImage           String?
    isAvailable            Boolean    @default(false)
  rideAsPassenger        Ride[]     @relation("PassengerRides")
  rideAsDriver           Ride[]     @relation("DriverRides")
  vehicles               Vehicle[]
 currentLat Float?
currentLng Float?

  accounts               Account[]  
  sessions               Session[]  
}


model Ride {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  startTime    DateTime?  
  endTime      DateTime?  
  status       RideStatus @default(REQUESTED)

  // Foreign keys
  passengerId  String
  passenger    User       @relation("PassengerRides", fields: [passengerId], references: [id])

  driverId     String?    // Nullable: no driver assigned yet
  driver       User?      @relation("DriverRides", fields: [driverId], references: [id])

  // Location fields
  pickupLat    Float
  pickupLng    Float
  dropoffLat   Float?
  dropoffLng   Float?

  // Optional ride tracking
  distanceKm   Float?
  durationMin  Float?
  fareAmount   Float?
}
model Vehicle {
  id        Int      @id @default(autoincrement())
  driverId  String
  driver    User     @relation(fields: [driverId], references: [id])
  plate     String   @unique
  type      String   // e.g. "car", "motorbike"
  color     String
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int? 
  token_type        String? 
  scope             String? 
  id_token          String? 
  session_state     String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
